- name: uninstall Docker
  apt:
    name: docker.io
    state: absent

- name: Add containerd module
  lineinfile:
    dest: /etc/modules-load.d/containerd.conf
    line: '{{ item }}'
    create: yes
  with_items:
  - overlay
  - br_netfilter

- name: load-containerd-modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
  - overlay
  - br_netfilter

- name: apply CRI sysctl
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    reload: yes
  with_items:
  - net.bridge.bridge-nf-call-iptables
  - net.ipv4.ip_forward
  - net.bridge.bridge-nf-call-ip6tables

- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present

- name: Download and Install Kubernetes GPG key
  shell: curl -fsSL "https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key" | gpg --dearmor -o /usr/share/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: "/usr/share/keyrings/kubernetes-apt-keyring.gpg"

- name: Add Kubernetes repository
  apt_repository:
    filename: kubernetes
    repo: "deb [signed-by=/usr/share/keyrings/kubernetes-apt-keyring.gpg] "https://pkgs.k8s.io/core:/stable:/v1.28/deb/" /"

- name: install containerd
  apt:
    name: containerd
    state: present
    update_cache: true

- name: Create containerd config dir
  file:
    path: /etc/containerd
    state: directory
  notify:
  - Configure ContainerD

- name: Execute ContainerD Handler
  meta: flush_handlers

- name: Start ContainerD
  service:
    name: containerd
    state: started

- name: install kubelet
  apt:
    name: kubelet
    state: present
    update_cache: true

- name: install kubeadm
  apt:
    name: kubeadm
    state: present

- name: disable swap
  lineinfile:
    path: /etc/fstab
    state: absent
    search_string: "swap.img"
  notify:
  - Swapoff

- name: HA Control DNS
  lineinfile:
    dest: /etc/hosts
    line: '192.168.63.99 kube-apiserver'
